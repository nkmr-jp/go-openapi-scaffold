// Code generated by OpenAPI Generator (https://openapi-generator.tech), DO NOT EDIT.
{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
    {{#featureCORS}}
	"github.com/gorilla/handlers"
    {{/featureCORS}}
	"github.com/gorilla/mux"
    "go.uber.org/zap"
    "github.com/nkmr-jp/go-logger-scaffold/logger"
)

// A Route defines the parameters for an api endpoint
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes are a collection of defined api endpoints
type Routes []Route

// Router defines the required methods for retrieving api routes
type Router interface { 
	Routes() Routes
}

// NewRouter creates a new router for any number of api routers
func NewRouter(routers ...Router) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, api := range routers {
		for _, route := range api.Routes() {
			var handler http.Handler
			handler = route.HandlerFunc
			handler = Logger(handler, route.Name)
            {{#featureCORS}}
			handler = handlers.CORS()(handler)
            {{/featureCORS}}

			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}

	return router
}

// EncodeJSONResponse uses the json encoder to write an interface to the http response with an optional status code
func EncodeJSONResponse(i interface{}, status *int, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if status != nil {
		w.WriteHeader(*status)
	} else {
		w.WriteHeader(http.StatusOK)
	}

	return json.NewEncoder(w).Encode(i)
}

// ReadFormFileToTempFile reads file data from a request form and writes it to a temporary file
func ReadFormFileToTempFile(r *http.Request, key string) (*os.File, error) {
	err := r.ParseForm()
	if err != nil {
		return nil, err
	}

	formFile, _, err := r.FormFile(key)
	if err != nil {
		return nil, err
	}

	defer formFile.Close()
	file, err := ioutil.TempFile("tmp", key)
	if err != nil {
		return nil, err
	}

	defer file.Close()
	fileBytes, err := ioutil.ReadAll(formFile)
	if err != nil {
		return nil, err
	}

	_, err = file.Write(fileBytes)
	if err != nil {
		return nil, err
	}
	return file, nil
}

// nolint:deadcode,unused
// parseIntParameter parses a sting parameter to an int64
func parseIntParameter(param string) (int64, error) {
	return strconv.ParseInt(param, 10, 64)
}

func BuildResponse(i interface{}, err error, w http.ResponseWriter) {
	if err != nil {
		// TODO: Add Error Response
	} else {
		status := http.StatusOK
		buildResponse(i, &status, w)
	}
}

func buildResponse(i interface{}, status *int, w http.ResponseWriter) {
	err := EncodeJSONResponse(i, status, w)
	if err != nil {
		logger.Errorf("ENCODE_JSON_RESPONSE_ERROR", err)
		w.WriteHeader(http.StatusInternalServerError)
	}
}

func Logger(inner http.Handler, name string) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		inner.ServeHTTP(w, r)

		logger.Info(
			fmt.Sprintf("HTTP_%s_%s", r.Method, name),
			zap.String("request_url", r.RequestURI),
			zap.String("duration", time.Since(start).String()),
		)
	})
}
